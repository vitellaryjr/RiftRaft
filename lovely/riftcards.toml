[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# initialize "rift card" color
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "DARK_EDITION = {0,0,0,1},"
position = "after"
payload = '''
RIFTRAFT_VOID = {0,0,0,1},
'''
match_indent = true

# define keyword for using "rift card" color in text
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "return G.ARGS.LOC_COLOURS[_c] or _default or G.C.UI.TEXT_DARK"
position = "before"
payload = '''
G.ARGS.LOC_COLOURS["riftraft_void"] = G.C.RIFTRAFT_VOID
'''
match_indent = true

# update "rift card" color
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.C.DARK_EDITION[2] = math.min(self.C.DARK_EDITION[3], self.C.DARK_EDITION[1])"
position = "after"
payload = '''
local riftraft_target = HEX("6b8286")
for i=1,3 do
    self.C.RIFTRAFT_VOID[i] = riftraft_target[i] * (math.sin(self.TIMERS.REAL*2) + 1) / 2
end
'''
match_indent = true

# prevent the Negative tooltip from showing up for every rift card
# [[patches]]
# [patches.regex]
# target = 'functions/common_events.lua'
# pattern = "(?<indent>[\t ]*)if(?<a> )v:sub\\(1,9\\) == 'negative_' then"
# position = 'at'
# root_capture = 'a'
# payload = ' _c.set ~= "Rift" and '
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "badges[#badges + 1] = 'negative_consumable'"
position = "after"
payload = '''
if self.config.center.set == 'Rift' then badges[#badges] = nil end
'''
match_indent = true

# define last used rift card
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet' then "
position = "before"
payload = '''
if card.config.center.set == 'Rift' then
    G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                G.GAME.riftraft_last_rift = card.config.center_key
                return true
            end}))
            return true
        end
    }))
end
'''
match_indent = true

# create a rift card when a black seal card is destroyed
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '-- TARGET: effects when cards are removed'
position = "after"
payload = '''
for i,v in ipairs(cards_destroyed) do
    RIFTRAFT.check_destroy_for_seal(v)
end
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '-- TARGET: effects after cards destroyed in discard'
position = "after"
payload = '''
for i,v in ipairs(destroyed_cards) do
    RIFTRAFT.check_destroy_for_seal(v)
end
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'SMODS.calculate_context({ remove_playing_cards = true, removed = destroyed_cards })'
position = "before"
payload = '''
for i,v in ipairs(destroyed_cards) do
    RIFTRAFT.check_destroy_for_seal(v)
end
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = 'SMODS.calculate_context({ remove_playing_cards = true, removed = destroyed_cards })'
position = "before"
payload = '''
for i,v in ipairs(destroyed_cards) do
    RIFTRAFT.check_destroy_for_seal(v)
end
'''
match_indent = true

# create the void UI in view deck
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = "(?<indent>[\t ]*)\\{\n[\t ]*label = localize\\('b_full_deck'\\),(\n[\t ]*chosen = true,)*\n.*\n[\t ]*\\},"
position = "after"
line_prepend = "$indent"
payload = '''
{
    label = localize('b_riftraft_void'),
    tab_definition_function = RIFTRAFT.view_void_deck
},
'''