[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# spawn extra booster packs
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "for i=1, G.GAME.starting_params.boosters_in_shop + (G.GAME.modifiers.extra_boosters or 0) do"
position = "at"
payload = '''
local riftraft_orig_amount = G.GAME.modifiers.extra_boosters
local spawn_void = nil
local void_rate = RIFTRAFT.void_pack_rate
if #G.riftraft_void.cards == 0 then
    void_rate = void_rate * 0.5 -- allows packs to spawn at a rarer rate even with nothing in the void
    -- void_rate = 0
end
if G.GAME.modifiers["riftraft_no_void"] or G.GAME.modifiers["riftraft_only_void"] then
    void_rate = 0
end
if G.GAME.riftraft_abyssal_deck or G.GAME.used_vouchers.v_riftraft_booster_slut or (pseudorandom(pseudoseed('pack_spawnvoid'..G.GAME.round_resets.ante)) <= void_rate) then
    G.GAME.modifiers.extra_boosters = (G.GAME.modifiers.extra_boosters or 0) + 1
    spawn_void = G.GAME.starting_params.boosters_in_shop + (G.GAME.modifiers.extra_boosters or 0)
end
local riftraft_tracked_packs = {}
local riftraft_pack_list = {}
if G.GAME.used_vouchers.v_riftraft_booster_gluttony then
    for k, v in ipairs(G.P_CENTER_POOLS.Booster) do
        if v.kind and not G.GAME.banned_keys[v.key] then
            if not riftraft_tracked_packs[v.kind] then
                riftraft_tracked_packs[v.kind] = {}
                riftraft_tracked_packs[v.kind].kind = v.kind
                table.insert(riftraft_pack_list, riftraft_tracked_packs[v.kind])
            end
            table.insert(riftraft_tracked_packs[v.kind], v)
            riftraft_tracked_packs[v.kind].full_weight = (riftraft_tracked_packs[v.kind].full_weight or 0) + (v.weight or 1)
        end
    end
    G.GAME.modifiers.extra_boosters = #riftraft_pack_list - G.GAME.starting_params.boosters_in_shop
    pseudoshuffle(riftraft_pack_list, pseudoseed('booster_glut'))
end
for i=1, G.GAME.starting_params.boosters_in_shop + (G.GAME.modifiers.extra_boosters or 0) do
    G.GAME.current_round.used_packs = G.GAME.current_round.used_packs or {}
    if G.GAME.used_vouchers.v_riftraft_booster_gluttony and riftraft_pack_list[i] then
        local packs = riftraft_pack_list[i]
        local cume, it, center = packs.full_weight, 0, nil
        local poll = pseudorandom(pseudoseed(('pack_glut_'..packs.kind)..G.GAME.round_resets.ante))*cume
        for k, v in ipairs(packs) do
            it = it + (v.weight or 1)
            if it >= poll and it - (v.weight or 1) <= poll then center = v; break end
        end
        G.GAME.current_round.used_packs[i] = center.key
    else
        local is_void = (i == spawn_void) or G.GAME.modifiers["riftraft_only_void"]
        if is_void then
            local voidpack_rng = pseudorandom(pseudoseed('pack_void_type'..G.GAME.round_resets.ante), 1, 13)
            local voidpack_type = 1
            if voidpack_rng > 4 then voidpack_type = voidpack_type + 1 end
            if voidpack_rng > 8 then voidpack_type = voidpack_type + 1 end
            if voidpack_rng > 12 then voidpack_type = voidpack_type + 1 end
            if G.GAME.riftraft_abyssal_deck then
                voidpack_type = 4
            end
            G.GAME.current_round.used_packs[i] = "p_riftraft_voidpack" .. voidpack_type
        end
    end
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
        G.shop_booster:emplace(card)
    end
end
'''
position = "after"
payload = '''
G.GAME.modifiers.extra_boosters = riftraft_orig_amount
'''
match_indent = true

# set void pack to be negative
# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# card.ability.booster_pos = i
# card:start_materialize()
# '''
# position = "after"
# payload = '''
# if is_void then
#     card:set_edition({negative = true}, nil, i == booster_amount)
# end
# '''
# match_indent = true

# spawn only mega packs if Abyssal Deck is active
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "return G.P_CENTERS['p_buffoon_normal_'..(math.random(1, 2))]"
position = "before"
payload = '''
if G.GAME.riftraft_abyssal_deck then
    return G.P_CENTERS['p_buffoon_mega_1']
end
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "if (not _type or _type == v.kind) then add = true end"
position = "after"
payload = '''
if G.GAME.riftraft_abyssal_deck and not v.name:find('Mega') then add = false end
'''
match_indent = true

# add a negative booster pack description
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.edition.type == 'negative' and self.ability.consumeable then
    badges[#badges + 1] = 'negative_consumable'
'''
position = "after"
payload = '''
elseif self.edition.type == 'negative' and self.ability.set == 'Booster' then
    badges[#badges + 1] = 'negative_booster'
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
position = "before"
payload = '''
if v == 'negative_booster' or v == 'negative_generic' then v = 'negative' end
'''
match_indent = true